# Multi-stage build for production deployment with enhanced security
FROM node:20-alpine AS frontend-builder

# Security: Create non-root user for build process
RUN addgroup -g 1001 -S nodejs && adduser -S frontend -u 1001 -G nodejs

# Security: Install security updates
RUN apk upgrade --no-cache

# Build frontend
WORKDIR /app/frontend
USER frontend

COPY --chown=frontend:nodejs resources/js/package*.json ./
RUN npm ci --only=production && npm cache clean --force
COPY --chown=frontend:nodejs resources/js/ ./
RUN npm run build

# PHP/Laravel backend with Node.js for SvelteKit
FROM node:20-alpine AS backend

# Security: Create application user
RUN addgroup -g 1001 -S app && adduser -S app -u 1001 -G app

# Security: Install security updates first
RUN apk upgrade --no-cache

# Install PHP and system dependencies with version pinning for security
RUN apk add --no-cache \
    php82=8.2.23-r0 \
    php82-fpm=8.2.23-r0 \
    php82-pdo=8.2.23-r0 \
    php82-pdo_pgsql=8.2.23-r0 \
    php82-mbstring=8.2.23-r0 \
    php82-exif=8.2.23-r0 \
    php82-pcntl=8.2.23-r0 \
    php82-bcmath=8.2.23-r0 \
    php82-gd=8.2.23-r0 \
    php82-session=8.2.23-r0 \
    php82-tokenizer=8.2.23-r0 \
    php82-xml=8.2.23-r0 \
    php82-ctype=8.2.23-r0 \
    php82-json=8.2.23-r0 \
    php82-fileinfo=8.2.23-r0 \
    php82-openssl=8.2.23-r0 \
    php82-curl=8.2.23-r0 \
    php82-redis=6.0.2-r0 \
    nginx=1.24.0-r15 \
    supervisor=4.2.5-r4 \
    curl=8.5.0-r0 \
    && rm -rf /var/cache/apk/*

# Security: Create symlinks for PHP
RUN ln -s /usr/bin/php82 /usr/bin/php

# Install Composer with signature verification
COPY --from=composer:2.6 /usr/bin/composer /usr/bin/composer

# Security: Verify Composer signature
RUN php -r "copy('https://composer.github.io/installer.sig', '/tmp/composer.sig');" \
    && php -r "copy('https://getcomposer.org/installer', '/tmp/composer-setup.php');" \
    && php -r "if (hash_file('sha384', '/tmp/composer-setup.php') === file_get_contents('/tmp/composer.sig')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('/tmp/composer-setup.php'); exit(1); } echo PHP_EOL;"

# Set working directory
WORKDIR /var/www/html

# Security: Set proper ownership before copying files
COPY --chown=app:app composer*.json ./

# Install PHP dependencies as app user
USER app
RUN composer install --no-dev --optimize-autoloader --no-scripts --no-interaction

# Switch back to root for system configuration
USER root

# Copy application files with proper ownership
COPY --chown=app:app . .
COPY --from=frontend-builder --chown=app:app /app/frontend/build ./resources/js/build/

# Security: Remove sensitive files and directories
RUN rm -rf \
    .git \
    .github \
    .env.example \
    tests \
    phpunit.xml \
    docker-compose.yml \
    README.md

# Security: Set proper file permissions
RUN chmod -R 755 /var/www/html \
    && chmod -R 775 /var/www/html/storage \
    && chmod -R 775 /var/www/html/bootstrap/cache

# Copy configuration files
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/php/php-fpm.conf /etc/php82/php-fpm.conf
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Security: Create directories with proper ownership
RUN mkdir -p /var/log/supervisor /var/run/nginx /var/run/php-fpm82 \
    && chown -R app:app /var/log/supervisor \
    && chown -R app:app /var/run/nginx \
    && chown -R app:app /var/run/php-fpm82

# Security: Configure PHP security settings
RUN echo "expose_php = Off" >> /etc/php82/php.ini \
    && echo "display_errors = Off" >> /etc/php82/php.ini \
    && echo "log_errors = On" >> /etc/php82/php.ini \
    && echo "error_log = /var/log/php_errors.log" >> /etc/php82/php.ini \
    && echo "allow_url_fopen = Off" >> /etc/php82/php.ini \
    && echo "allow_url_include = Off" >> /etc/php82/php.ini \
    && echo "session.cookie_httponly = On" >> /etc/php82/php.ini \
    && echo "session.cookie_secure = On" >> /etc/php82/php.ini \
    && echo "session.use_strict_mode = On" >> /etc/php82/php.ini

# Security: Configure Nginx security settings
RUN echo "server_tokens off;" >> /etc/nginx/nginx.conf

# Security: Create health check script
COPY docker/healthcheck.sh /usr/local/bin/healthcheck.sh
RUN chmod +x /usr/local/bin/healthcheck.sh \
    && chown app:app /usr/local/bin/healthcheck.sh

# Run Laravel optimization as app user
USER app
RUN php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache

# Switch back to root for final setup
USER root

# Security: Remove unnecessary packages and clean up
RUN apk del --no-cache wget curl \
    && rm -rf /tmp/* /var/tmp/* /usr/share/man /usr/share/doc \
    && rm -rf /var/cache/apk/*

# Security: Set final user
USER app

# Expose port
EXPOSE 8080

# Security: Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# Security: Use supervisor to manage processes as non-root user
CMD ["supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf", "-n"]

# Security: Add labels for better container management
LABEL maintainer="WNBA Stat Spot Team" \
      version="1.0" \
      description="Secure WNBA Statistics Application" \
      security.scan="trivy" \
      security.policy="restricted"