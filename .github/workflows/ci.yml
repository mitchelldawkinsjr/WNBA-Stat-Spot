name: CI Pipeline

on:
  push:
    branches: [main, develop, refactor-main]
  pull_request:
    branches: [main, develop]

env:
  PHP_VERSION: 8.2
  NODE_VERSION: 20

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: wnba_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: wnba_test
        options: >-
          --health-cmd "pg_isready -U wnba_test -d wnba_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo, pdo_pgsql, mbstring, exif, pcntl, bcmath, gd, redis
          coverage: xdebug
          tools: composer:v2
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: resources/js/package-lock.json
          
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
          
      - name: Install PHP Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
        
      - name: Install Frontend Dependencies
        working-directory: ./resources/js
        run: npm ci
        
      - name: Copy Environment File
        run: cp .env.example .env.testing
        
      - name: Generate Application Key
        run: php artisan key:generate --env=testing
        
      - name: Configure Test Environment
        run: |
          echo "DB_CONNECTION=pgsql" >> .env.testing
          echo "DB_HOST=localhost" >> .env.testing
          echo "DB_PORT=5432" >> .env.testing
          echo "DB_DATABASE=wnba_test" >> .env.testing
          echo "DB_USERNAME=wnba_test" >> .env.testing
          echo "DB_PASSWORD=test_password" >> .env.testing
          echo "REDIS_HOST=localhost" >> .env.testing
          echo "REDIS_PORT=6379" >> .env.testing
          echo "CACHE_DRIVER=redis" >> .env.testing
          echo "QUEUE_CONNECTION=redis" >> .env.testing
          echo "SESSION_DRIVER=redis" >> .env.testing
          
      - name: Run Database Migrations
        env:
          APP_ENV: testing
        run: php artisan migrate --env=testing --force
        
      - name: Build Frontend Assets
        working-directory: ./resources/js
        run: npm run build
        
      - name: Run PHP Code Style Check
        run: vendor/bin/pint --test
        continue-on-error: true
        
      - name: Run PHP Tests
        env:
          APP_ENV: testing
        run: vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-text
        
      - name: Run Frontend Linting
        working-directory: ./resources/js
        run: npm run lint
        continue-on-error: true
        
      - name: Run Frontend Type Check
        working-directory: ./resources/js
        run: npm run check
        continue-on-error: true
        
      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: php-coverage
          
      - name: Archive Test Results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            storage/logs/
            tests/results/
          retention-days: 5

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo, mbstring, exif, pcntl, bcmath, gd
          tools: composer:v2
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: resources/js/package-lock.json
          
      - name: Install Dependencies
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction
          cd resources/js && npm ci
          
      - name: Build Production Assets
        working-directory: ./resources/js
        run: npm run build
        
      - name: Optimize Laravel
        run: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          
      - name: Create Build Archive
        run: |
          tar -czf application-build.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=tests \
            --exclude=storage/logs \
            .
            
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: application-build
          path: application-build.tar.gz
          retention-days: 30

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64