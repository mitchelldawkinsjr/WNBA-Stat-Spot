name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PHP_VERSION: 8.2
  NODE_VERSION: 20

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo, mbstring, exif, pcntl, bcmath, gd
          tools: composer:v2
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: resources/js/package-lock.json
          
      - name: Install Dependencies
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction
          cd resources/js && npm ci
          
      - name: Build Production Assets
        working-directory: ./resources/js
        run: npm run build
        
      - name: Deploy to Railway (Staging)
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE_ID }}
          
      - name: Wait for Deployment
        run: sleep 60
        
      - name: Health Check
        run: |
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1
          echo "Staging deployment successful!"
          
      - name: Notify Deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo, mbstring, exif, pcntl, bcmath, gd
          tools: composer:v2
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: resources/js/package-lock.json
          
      - name: Install Dependencies
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction
          cd resources/js && npm ci
          
      - name: Build Production Assets
        working-directory: ./resources/js
        run: npm run build
        
      - name: Create Database Backup
        run: |
          echo "Creating database backup before deployment..."
          # This would connect to production DB and create backup
          # Implementation depends on your database setup
          
      - name: Deploy to Render (Production)
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": true}' \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys"
            
      - name: Wait for Deployment
        run: sleep 120
        
      - name: Health Check
        run: |
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
          echo "Production deployment successful!"
          
      - name: Run Post-Deployment Tests
        run: |
          curl -f ${{ secrets.PRODUCTION_URL }}/health/detailed
          # Add more comprehensive health checks here
          
      - name: Notify Deployment Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "üöÄ Production deployment successful!"
          
      - name: Notify Deployment Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#critical'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "üö® Production deployment failed! Immediate attention required."

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-staging, deploy-production]
    environment: production
    
    steps:
      - name: Rollback Production
        run: |
          echo "Rolling back production deployment..."
          # Implementation depends on your deployment platform
          # For Railway/Render, this might involve deploying previous commit
          
      - name: Notify Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              channel: '#critical',
              text: '‚ö†Ô∏è Production rollback initiated due to deployment failure',
              color: 'warning'
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}