name: Security Scan

on:
  push:
    branches: [main, develop, refactor-main]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1' # Weekly Monday 2 AM UTC
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          tools: composer:v2
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install PHP Dependencies
        run: composer install --no-dev --optimize-autoloader
        
      - name: PHP Security Checker
        uses: StephaneBour/actions-php-security-checker@1.1
        with:
          composer-lock: './composer.lock'
          
      - name: Install Frontend Dependencies
        working-directory: ./resources/js
        run: npm ci
        
      - name: NPM Security Audit
        working-directory: ./resources/js
        run: |
          npm audit --audit-level moderate --json > npm-audit.json || true
          if [ -s npm-audit.json ]; then
            echo "NPM vulnerabilities found:"
            cat npm-audit.json
            npm audit --audit-level moderate
          else
            echo "No NPM vulnerabilities found"
          fi
          
      - name: Upload NPM Audit Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-results
          path: resources/js/npm-audit.json
          retention-days: 30

  code-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis
          
      - name: Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/php
            p/javascript
            p/typescript
          generateSarif: "1"
          
      - name: Upload Semgrep Results to GitHub
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image for scanning
        run: docker build -t wnba-stat-spot:latest .
        
      - name: Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'wnba-stat-spot:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy Results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0' # Don't fail the job
          severity: 'CRITICAL,HIGH'

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Checkov Infrastructure Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,docker_compose,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif
          quiet: true
          
      - name: Upload Checkov Results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif

  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          tools: composer:v2
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install Dependencies
        run: |
          composer install --no-dev
          cd resources/js && npm ci
          
      - name: PHP License Check
        run: |
          composer show --format=json > php-licenses.json
          echo "PHP dependencies and their licenses:"
          composer licenses
          
      - name: NPM License Check
        working-directory: ./resources/js
        run: |
          npx license-checker --json --out npm-licenses.json || true
          echo "NPM dependencies and their licenses:"
          npx license-checker --summary || true
          
      - name: Upload License Reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            php-licenses.json
            resources/js/npm-licenses.json
          retention-days: 90

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secrets-scan, container-scan, infrastructure-scan]
    if: always()
    
    steps:
      - name: Security Scan Summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Analysis | ${{ needs.code-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Detection | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Scan | ${{ needs.container-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Scan | ${{ needs.infrastructure-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Check the Security tab for detailed vulnerability reports" >> $GITHUB_STEP_SUMMARY
          echo "- Review any failed scans and address identified issues" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor dependency updates and security advisories" >> $GITHUB_STEP_SUMMARY